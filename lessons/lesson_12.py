# знакомство с символом *

# когда переменных меньше чем значений, то можно использовать *
# в данном случае a = True, b = '45', а остальное помещается в переменную - c
a, b, *c = [True, '45', 'Roman', 67, 90, False, '45.89']

# в данном случае d = True, f = '45.89', а остальное помещается в переменную - e
d, *e, f = [True, '45', 'Roman', 67, 90, False, '45.89']

# должно быть как минимум два аргумента, *a будет в данном случае пустым списком
*g, j, i = (2, True)
print(*g, j, i)

# ---------------------------------------- #

s = [2, 10]  # создаем список
print(list(range(1, 5)))
print(list(range(*s)))  # если у нас стоит * перед переменной со списком, то мы сможем вызвать список чисел из нее


# ---------------------------------------- #

def qq(q, w, e, r):
    print(q, w, e, r)


qwerty = 'yes', True, False, [5, 78, 90.9, 'hello']

qq(*qwerty)  # если при вызове функции мы будем использовать оператор *, то переменная распакуется на все аргументы


# ---------------------------------------- #

# *args - неименованные аргументы
def example(*args):  # функция принимает любое количество передаваемых неименованных аргументов
    z = 0
    for jk in args:
        z += jk

    return z


print(example(1, 2, 3, 5, 66, 90))
print(example(1, 90))


# ---------------------------------------- #

# **kwargs - именованные аргументы
def start(**kwargs):  # аргументов может быть сколько угодно
    print(kwargs)  # именованные аргументы выводятся в виде словаря
    for k, v in kwargs.items():  # мы можем вытянуть из словаря пару ключ/значение через метод .items()
        print(k, v)


start(ar=1, ty=67, op=90, name='Roman')


# ---------------------------------------- #

# можно комбинировать именованные и неименованные аргументы
def fall(*args, **kwargs):
    print(args, kwargs)
    print(type(args), type(kwargs))


fall(1, 2, 3, 4, sdf='toy', toh='wert')  # args - кортеж, kwargs - словарь

# ---------------------------------------- #
