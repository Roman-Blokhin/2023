Здесь будут описаны команды для Django в консоли:

django-admin - посмотреть все команды ,которые можно выполнить на django
django-admin startproject first(вводим название проекта) - создает основу нашего будущего проекта
python manage.py runserver - запускает локальный сервер


Создание нового проекта на django:
1. В консоли входим в нужную папку и создаем новую папку для нашего проекта: "mkdir название"
2. Входим в папку проекта и создаем основу нового проекта: "django-admin startproject название"
3. Заходим через терминал в папку проекта, в которой лежит файл manage.py и запускаем локальный сервер, открывая файл
команда: python manage.py runserver
4. После завершения кодинга всегда выходим с локального сервера, нажав CTRL-С
5. Затем мы должны создать приложение в нашем проекте. Одно приложение - это один раздел на сайте, к примеру, форум,
главная страница, страница с контактами и т.д. - python manage.py startapp main(main - название приложения/раздела)

(5.1 Создалась папка с миграциями. Файлы миграции нужны, чтобы описать структуру базы данных, с помощью них мы связываем
наше приложение с базой данных
5.2 В файлах __init__.py - описывается функционал, который должен срабатывать сразу при старте
5.3 admin.py - записываем, какие таблички отражаются в панели администратора
5.4 apps.py описываем настройки, которые принадлежат к конкретному приложению
5.5 models.py - создается класс, на основе которого будет создана таблица в базе данных
5.6 tests.py - описываются различные тесты, к примеру unit-тестирование нашего приложения
5.7 views.py - отвечает за методы, которые будут вызваны при переходе на какую-нибудь страницу)

6. Переходим в основную папку с проектом, заходим в файл settings.py, нам нужно зарегистрировать наше новое приложение.
Находим - INSTALLED_APPS, и прописываем название приложения - 'main'. Так делаем с каждым новым приложением
7. Учимся отслеживать различные url адреса, для этого переходим в файл urls и добавляем в список urlpatterns новый
элемент. Если хотим передать главную страницу, то первым атрибутом ставим пустые кавычки, а вторым ссылку на такой же
файл в папке нового нашего приложения: path('', include('main.urls')). Перед этим мы прописали include в импорт:
from django.urls import path, include
8. Создаем в нашем проекте main новый файл и переносим туда код, удаляя импорт панели администратора и наши паттерны в
списке

9. Теперь нам нужно прописать путь для перехода пользователя на главную страницу, для этого мы подключаем файл
views.py к файлу urls и прописываем паттерн в список, чтобы вызвать определенный метод
9.1 В файле views мы создаем метод, который будет выполнен
9.2 Так выглядит паттерн в файле main/urls: path('', views.index)
9.3 В файле views.py импортируем HttpResponse из django.http, прописываем, что возвращаем в методе - УСТАРЕЛО(см п.10)
9.4 Запускаем сервер через терминал командой: python manage.py runserver
9.5 Можем добавить новую страницу для перехода about, а на самом сервере дописываем в url строку
http://127.0.0.1:8000/about

10. В файле views.py лучше использовать не HttpResponse, а render, потому что render сможет корректно подгрузить шаблон
страницы
10.1 В нашем приложении (main) создаем папку templates, где будем прописывать шаблоны страницы, здесь же создаем еще
одну папку, можно назвать ее также, как проект, main, чтобы в будущем, когда будет много приложений, django не
перепутал данные из разных проектов
10.2 Создаем файл шаблона, название любое (index.html) и прописываем путь в файле views.py (main/index.html)
10.3 Создаем файл шаблона, название любое (about.html) и прописываем путь в файле views.py (main/about.html)
10.4 Так как у нас много одинакового кода в файлах html, мы должны создать отдельный шаблон, куда перенесем
повторяющийся код. Файл lay_out.html
