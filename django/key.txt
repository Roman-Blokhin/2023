Здесь будут описаны команды для Django в консоли:

django-admin - посмотреть все команды ,которые можно выполнить на django
django-admin startproject first(вводим название проекта) - создает основу нашего будущего проекта
python manage.py runserver - запускает локальный сервер


Создание нового проекта на django:
1. В консоли входим в нужную папку и создаем новую папку для нашего проекта: "mkdir название"
-----------------------

2. Входим в папку проекта и создаем основу нового проекта: "django-admin startproject название"
-----------------------

3. Заходим через терминал в папку проекта, в которой лежит файл manage.py и запускаем локальный сервер, открывая файл
команда: python manage.py runserver
-----------------------

4. После завершения кодинга всегда выходим с локального сервера, нажав CTRL-С
-----------------------

5. Затем мы должны создать приложение в нашем проекте. Одно приложение - это один раздел на сайте, к примеру, форум,
главная страница, страница с контактами и т.д. - python manage.py startapp main(main - название приложения/раздела)
(5.1 Создалась папка с миграциями. Файлы миграции нужны, чтобы описать структуру базы данных, с помощью них мы связываем
наше приложение с базой данных
5.2 В файлах __init__.py - описывается функционал, который должен срабатывать сразу при старте
5.3 admin.py - записываем, какие таблички отражаются в панели администратора
5.4 apps.py описываем настройки, которые принадлежат к конкретному приложению
5.5 models.py - создается класс, на основе которого будет создана таблица в базе данных
5.6 tests.py - описываются различные тесты, к примеру unit-тестирование нашего приложения
5.7 views.py - отвечает за методы, которые будут вызваны при переходе на какую-нибудь страницу)
-----------------------

6. Переходим в основную папку с проектом, заходим в файл settings.py, нам нужно зарегистрировать наше новое приложение.
Находим - INSTALLED_APPS, и прописываем название приложения - 'main'. Так делаем с каждым новым приложением
-----------------------

7. Учимся отслеживать различные url адреса, для этого переходим в файл urls и добавляем в список urlpatterns новый
элемент. Если хотим передать главную страницу, то первым атрибутом ставим пустые кавычки, а вторым ссылку на такой же
файл в папке нового нашего приложения: path('', include('main.urls')). Перед этим мы прописали include в импорт:
from django.urls import path, include
-----------------------

8. Создаем в нашем проекте main новый файл - urls.py, и переносим туда код, удаляя импорт панели администратора и наши
паттерны в списке
-----------------------

9. Теперь нам нужно прописать путь для перехода пользователя на главную страницу, для этого мы подключаем файл
views.py к файлу urls и прописываем паттерн в список, чтобы вызвать определенный метод
9.1 В файле views мы создаем метод, который будет выполнен
9.2 Так выглядит паттерн в файле main/urls: path('', views.index)
9.3 В файле views.py импортируем HttpResponse из django.http, прописываем, что возвращаем в методе - УСТАРЕЛО(см п.10)
9.4 Запускаем сервер через терминал командой: python manage.py runserver
9.5 Можем добавить новую страницу для перехода about, а на самом сервере дописываем в url строку
http://127.0.0.1:8000/about
-----------------------

10. В файле views.py лучше использовать не HttpResponse, а render, потому что render сможет корректно подгрузить шаблон
страницы
10.1 В нашем приложении (main) создаем папку templates, где будем прописывать шаблоны страницы, здесь же создаем еще
одну папку, можно назвать ее также, как проект, main, чтобы в будущем, когда будет много приложений, django не
перепутал данные из разных проектов
10.2 Создаем файл шаблона, название любое (index.html) и прописываем путь в файле views.py (main/index.html)
10.3 Создаем файл шаблона, название любое (about.html) и прописываем путь в файле views.py (main/about.html)
-----------------------

11 Так как у нас много одинакового кода в файлах html, мы должны создать отдельный шаблон, куда перенесем
повторяющийся код. Файл lay_out.html
11.1 Мы будем использовать шаблонизатор Jinja для того, чтобы перенести одинаковый стандартный код в отдельный файл
lay_out.pyю Для этого мы будем использовать конструкцию, которая говорит, что в этом месте код будет меняться.
Ставим конструкцию в тегах: title и body:

    {% block body %}  <!-- конструкция, которая обозначает, что код здесь будет меняться. body - это название блока -->
    {% ebdblock %}  <!-- закрываем наш блок кода -->

11.2 Переходим в наш файл главной страницы index.html, прописываем конструкцию которая говорит, что мы наследуем
код из файла lay_out.html:

{% extends 'lay_0ut.html' %}  <!-- файл у которого наследуем код -->

11.3 Теперь прописываем сами блоки нашего кода в файлах html и about, в таком ключе:

{% block body %}
    <h1>Привет, здесь будет начало!</h1>
{% endblock %}

11.4 Создали тестовый файл test.html, чтобы протестировать метод include. Пригодится если есть какая-то секция, которая
должна повторяться во многих файлах. Мы просто выносим ее в отдельный файл. Подключает код с помощью конструкции:

{% include 'main/test.html' %}
-----------------------

12. Теперь нам нужно подключить bootstrap - стили для нашего сайта. Заходим на сайт https://www.bootstrapcdn.com/
и копируем ссылку CSS: https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css , вставляем ее в наш
общий шаблон lay_out.py, в header, с помощью <link>
-----------------------

13. Подключаем свой собственный файл css. Для этого нужно обязательно в нашем приложении создать папку static, в ней
создаем папку main(название нашего приложения), по аналогии с папкой templates.  Это делается для того, чтобы когда мы
будем собирать наш сайт в одно, чтобы программа не перезаписала файлы в папках static из всех наших приложений в одно.
Далее создаем папки css(будут все стили) и img(будут все картинки) и js(все js файлы)
13.1 В папке css создаем новый файл main.css
13.2 Подключаем в файле lay_out.html то, что мы будем работать со всеми статическими файлами из папки static:

{% load static %}

13.3 прописываем с помощью link в head ссылку на наш файл main.css:

<link rel="stylesheet" href="{% static 'main/css/main.css' %}">

13.4 В файле main.css пишем первый стиль для теста
13.5 Прописываем в файле settings.py - STATICFILES_DIRS, скопированную из документации, чтобы проект нашел все
статические файлы:

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

13.6 Чтобы точно статические файлы подключились, мы копируем из документации код в файл urls.py, который лежит в
папке blog:

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)  - копируем строчку от знака + в паттернах
-----------------------

14. Делаем страницу сайта:
14.1 Добавил картинку в папку static/img
14.2 Начинаем писать код в файле lay_out.html, добавляем в body боковую панель <aside></aside> и основной центральный
блок <main></main>
14.3 В <aside></aside> добавляем:
- логотип, картинки также подключаются, как и файлы: <img src="{% static 'img/logo.ico' %}" alt="logo">
- <span class="logo">Сайт Визитка</span> - контейнер с названием и стилем
- <h3>Навигация</h3> - заголовок для меню
- само меню с навигацией - ul>li*3, для страниц прописываем ссылки: <a href=""><li>Главная</li></a>
14.4 Подключаем сервис с иконками: https://fontawesome.com/,
вставляя в head ссылку <link rel="stylesheet" href="http://use.fontawesome.com/releases/v5.8.2/css/all.css">
- ищем иконку, копируем ее ссылку и вставляем в код, пример: <i class="fa fa-igloo">
-----------------------

15. Прописываем стили для нашей страницы в файле main.css
-----------------------

16. Прописываем имена для ссылки на страницу в файле нашего приложения main/urls.py:
path('about', views.about, name='home')
16.1 После этого возвращаемся в файл lay_out.html и прописываем путь для перехода по ссылкам с помощью jinja:
<a href="{% url 'home' %}"><li><i class="fa fa-passport"></i> Главная</li></a>
-----------------------

17. Сделаем в файле index.html новое наполнение и подключим стили. Создать новый контейнер с названием класса
можно с помощью команды div.features, получится вот что: <div class="features"></div>
17.1 Добавляем в файл lay_out.html в body раздел main, переносим туда код на jinja, который в последствии меняем
в файле index.html.
17.2 Добавляем стиль для класса features в файле main.css
17.3 Дублируем код в файл about.html, потом текст сам можно будет поменять, стили будут такие же
-----------------------

18. Передача данных в шаблоны:
- входим в файл main/views.py и прописываем в параметрах функции словарь (ключ: значение)
return render(request, 'main/index.html', {'title': 'Главная страница'})
- переходим в файл index.html и меняем код в h1 и нашем title - прописывает ключ, который вызываем:
<h1>{{ title }}</h1>
- в функции создали отдельный словарь, куда переносим значения
data = {
    'title': 'Главная страница',
    'values': ['some', '123', 'welcome']
}

- В файле about.html перебираем с помощью jinja и цикла for все значения:
{% for el in values %}  - создаем цикл
    <p>{{ el }}</p>  - выводим каждый элемент списка
{% endfor %}  - обязательно закрываем цикл



